<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AspCoreStudy</name>
    </assembly>
    <members>
        <member name="M:AspCoreStudy.Controllers.AccountApiController.Register(AspCoreStudy.Models.User)">
            <summary>
            通过创建新用户并分配默认角色来处理用户注册。
            </summary>
            <param name="user">The user object containing registration details.</param>
            <returns>A response indicating the success or failure of the registration.</returns>
        </member>
        <member name="M:AspCoreStudy.Controllers.AccountApiController.Login(AspCoreStudy.Models.User)">
            <summary>
            通过验证凭据并生成令牌来处理用户登录。
            </summary>
            <param name="user">The user object containing login details.</param>
            <returns>A response containing a token if login is successful.</returns>
        </member>
        <member name="T:AspCoreStudy.Controllers.AccountController">
            <summary>
            用于管理用户账户的控制器，包括登录和注册。
            </summary>
            <param name="userService">Service for user-related operations.</param>
            <param name="roleService">Service for role-related operations.</param>
            <param name="tokenService">Service for token generation and management.</param>
        </member>
        <member name="M:AspCoreStudy.Controllers.AccountController.#ctor(AspCoreStudy.Services.IUserService,AspCoreStudy.Services.IRoleService,AspCoreStudy.Services.TokenService)">
            <summary>
            用于管理用户账户的控制器，包括登录和注册。
            </summary>
            <param name="userService">Service for user-related operations.</param>
            <param name="roleService">Service for role-related operations.</param>
            <param name="tokenService">Service for token generation and management.</param>
        </member>
        <member name="M:AspCoreStudy.Controllers.AccountController.Login">
            <summary>
            显示登录页面。
            </summary>
            <returns>The login view.</returns>
        </member>
        <member name="M:AspCoreStudy.Controllers.AccountController.Register">
            <summary>
            显示注册页面。
            </summary>
            <returns>The registration view.</returns>
        </member>
        <member name="T:AspCoreStudy.Controllers.BackStageApiController">
            <summary>
            后台 API 操作的控制器。  
            </summary>  
            <param name="userService">用于用户相关操作的服务。</param>  
        </member>
        <member name="M:AspCoreStudy.Controllers.BackStageApiController.#ctor(AspCoreStudy.Services.IUserService)">
            <summary>
            后台 API 操作的控制器。  
            </summary>  
            <param name="userService">用于用户相关操作的服务。</param>  
        </member>
        <member name="M:AspCoreStudy.Controllers.BackStageApiController.QueryUsers">
            <summary>
            从系统中查询所有用户。
            </summary>
            <returns>包含用户列表的 IActionResult。</returns>
        </member>
        <member name="T:AspCoreStudy.Controllers.BackStageController">
            <summary>
            用于管理后台操作的控制器。
            </summary>
        </member>
        <member name="M:AspCoreStudy.Controllers.BackStageController.Usermanagement">
            <summary>
            显示用户管理视图。
            </summary>
            <returns>用户管理视图。</returns>
        </member>
        <member name="T:AspCoreStudy.GlobalExceptionFilter">
            <summary>
            一个全局异常过滤器，用于处理异常并显示错误视图。
            </summary>
        </member>
        <member name="M:AspCoreStudy.GlobalExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{AspCoreStudy.GlobalExceptionFilter})">
            <summary>
            构造函数，注入日志记录器。
            </summary>
            <param name="logger">日志记录器。</param>
        </member>
        <member name="M:AspCoreStudy.GlobalExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <inheritdoc/>
        </member>
        <member name="T:AspCoreStudy.Repositories.IRepository`1">
            <summary>
            表示用于管理<typeparamref name="T"/>类型实体的通用存储库.
            </summary>
            <typeparam name="T">实体的类型。</typeparam>
        </member>
        <member name="M:AspCoreStudy.Repositories.IRepository`1.GetAllAsync">
            <summary>
            获取所有数据.
            </summary>
            <returns>一个包含所有<typeparamref name="T"/>类型实体的任务.</returns>
        </member>
        <member name="M:AspCoreStudy.Repositories.IRepository`1.GetByIdAsync(System.Int32)">
            <summary>
            根据Id获取数据.
            </summary>
            <param name="id">实体的唯一标识符.</param>
            <returns>一个包含指定<typeparamref name="T"/>类型实体的任务.</returns>
        </member>
        <member name="M:AspCoreStudy.Repositories.IRepository`1.AddAsync(`0)">
            <summary>
            创建一个新的<typeparamref name="T"/>类型实体.
            </summary>
            <param name="entity">要创建的实体.</param>
        </member>
        <member name="M:AspCoreStudy.Repositories.IRepository`1.UpdateAsync(System.Int32,`0)">
            <summary>
            更新指定Id的<typeparamref name="T"/>类型实体.
            </summary>
            <param name="id">实体的唯一标识符.</param>
            <param name="entity">要更新的实体.</param>
        </member>
        <member name="M:AspCoreStudy.Repositories.IRepository`1.DeleteAsync(System.Int32)">
            <summary>
            删除指定Id的<typeparamref name="T"/>类型实体.
            </summary>
            <param name="id">实体的唯一标识符.</param>
        </member>
        <member name="T:AspCoreStudy.Repositories.IRoleRepository">
            <summary>
            角色存储库的接口，用于管理角色实体。
            </summary>
        </member>
        <member name="M:AspCoreStudy.Repositories.IRoleRepository.GetRoleByNameAsync(System.String)">
            <summary>
            根据指定的角色名称检索角色实体。
            </summary>
            <param name="roleName">要检索的角色名称。</param>
            <returns>表示异步操作的任务。任务结果包含角色实体。</returns>
        </member>
        <member name="T:AspCoreStudy.Repositories.IUserRepository">
            <summary>
            用户存储库操作的接口。
            </summary>
        </member>
        <member name="M:AspCoreStudy.Repositories.IUserRepository.GetUserByUsernameAsync(System.String)">
            <summary>
            根据账号查询用户。
            </summary>
            <param name="username">用户的用户名。</param>
            <returns>表示异步操作的任务。任务结果包含用户。</returns>
        </member>
        <member name="M:AspCoreStudy.Repositories.IUserRepository.AssignRoleAsync(System.Int32,System.Int32)">
            <summary>
            分配角色给用户。
            </summary>
            <param name="userId">用户的ID。</param>
            <param name="roleId">角色的ID。</param>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="M:AspCoreStudy.Repositories.IUserRepository.GetUserPermissionsAsync(System.Int32)">
            <summary>
            获取用户的权限。
            </summary>
            <param name="userId">用户的ID。</param>
            <returns>表示异步操作的任务。任务结果包含用户的权限列表。</returns>
        </member>
        <member name="T:AspCoreStudy.Repositories.Repository`1">
            <inheritdoc />
        </member>
        <member name="M:AspCoreStudy.Repositories.Repository`1.#ctor(AspCoreStudy.Models.ApplicationDbContext)">
            <inheritdoc />
        </member>
        <member name="F:AspCoreStudy.Repositories.Repository`1._context">
            <summary>
            用于访问数据库的数据库上下文。
            </summary>
        </member>
        <member name="F:AspCoreStudy.Repositories.Repository`1._dbSet">
            <summary>
            表示实体类型<typeparamref name="T"/>的数据库集。
            </summary>
        </member>
        <member name="M:AspCoreStudy.Repositories.Repository`1.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Repositories.Repository`1.DeleteAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Repositories.Repository`1.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Repositories.Repository`1.GetByIdAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Repositories.Repository`1.UpdateAsync(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="T:AspCoreStudy.Repositories.RoleRepository">
            <ihneritdoc />
        </member>
        <member name="M:AspCoreStudy.Repositories.RoleRepository.#ctor(AspCoreStudy.Models.ApplicationDbContext)">
            <ihneritdoc />
        </member>
        <member name="M:AspCoreStudy.Repositories.RoleRepository.GetRoleByNameAsync(System.String)">
            <ihneritdoc />
        </member>
        <member name="T:AspCoreStudy.Repositories.UserRepository">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Repositories.UserRepository.#ctor(AspCoreStudy.Models.ApplicationDbContext)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Repositories.UserRepository.AssignRoleAsync(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Repositories.UserRepository.GetUserByUsernameAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Repositories.UserRepository.GetUserPermissionsAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:AspCoreStudy.Services.IRoleService">
            <summary>
            提供管理角色的方法。
            </summary>
        </member>
        <member name="M:AspCoreStudy.Services.IRoleService.FetchRoleByNameAsync(System.String)">
            <summary>
            异步获取指定名称的角色。
            </summary>
            <param name="roleName">要获取的角色名称。</param>
            <returns>表示异步操作的任务。任务结果包含角色。</returns>
        </member>
        <member name="T:AspCoreStudy.Services.IUserService">
            <summary>
            提供用户管理和身份验证的方法。
            </summary>
        </member>
        <member name="M:AspCoreStudy.Services.IUserService.AssignRoleToUserAsync(System.Int32,System.Int32)">
            <summary>
            异步分配角色给用户。
            </summary>
            <param name="userId">用户的ID。</param>
            <param name="roleId">要分配的角色ID。</param>
        </member>
        <member name="M:AspCoreStudy.Services.IUserService.AuthenticateUserAsync(System.String,System.String)">
            <summary>
            异步验证用户的用户名和密码。
            </summary>
            <param name="username">用户的用户名。</param>
            <param name="password">用户的密码。</param>
            <returns>返回验证成功的用户对象。</returns>
        </member>
        <member name="M:AspCoreStudy.Services.IUserService.CreateAsync(AspCoreStudy.Models.User)">
            <summary>
            异步创建一个新的用户。
            </summary>
            <param name="user">要创建的用户对象。</param>
        </member>
        <member name="M:AspCoreStudy.Services.IUserService.FetchAllUsersAsync">
            <summary>
            异步获取所有用户。
            </summary>
            <returns>返回包含所有用户的用户对象。</returns>
        </member>
        <member name="M:AspCoreStudy.Services.IUserService.FetchPermissionsForUserAsync(System.Int32)">
            <summary>
            异步获取指定用户的权限列表。
            </summary>
            <param name="userId">用户的ID。</param>
            <returns>返回包含用户权限的字符串列表。</returns>
        </member>
        <member name="M:AspCoreStudy.Services.IUserService.FetchUserByUsernameAsync(System.String)">
            <summary>
            异步获取指定用户名的用户。
            </summary>
            <param name="username">用户的用户名。</param>
            <returns>返回匹配用户名的用户对象。</returns>
        </member>
        <member name="T:AspCoreStudy.Services.RoleService">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Services.RoleService.#ctor(AspCoreStudy.Repositories.IRoleRepository)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Services.RoleService.FetchRoleByNameAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AspCoreStudy.Services.TokenService">
            <summary>
            提供生成和验证 JWT Token 的方法。
            </summary>
        </member>
        <member name="M:AspCoreStudy.Services.TokenService.#ctor(System.String)">
            <summary>
            提供生成和验证 JWT Token 的方法。
            </summary>
        </member>
        <member name="M:AspCoreStudy.Services.TokenService.GenerateToken(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            为指定用户生成包含给定权限的JWT令牌。
            </summary>
            <param name="username">生成令牌的用户名。</param>
            <param name="permissions">要包含在令牌中的权限列表。</param>
            <returns>作为字符串的JWT令牌。</returns>
        </member>
        <member name="T:AspCoreStudy.Services.UserService">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Services.UserService.#ctor(AspCoreStudy.Repositories.IUserRepository)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Services.UserService.AssignRoleToUserAsync(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Services.UserService.AuthenticateUserAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Services.UserService.CreateAsync(AspCoreStudy.Models.User)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Services.UserService.FetchAllUsersAsync">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Services.UserService.FetchPermissionsForUserAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AspCoreStudy.Services.UserService.FetchUserByUsernameAsync(System.String)">
            <inheritdoc/>
        </member>
    </members>
</doc>
